Selecting previously unselected package libboost-program-options1.65.1:amd64.
(Reading database ... 375069 files and directories currently installed.)
Preparing to unpack .../libboost-program-options1.65.1_1.65.1+dfsg-0ubuntu5_amd64.deb ...
Unpacking libboost-program-options1.65.1:amd64 (1.65.1+dfsg-0ubuntu5) ...
Selecting previously unselected package libtcmalloc-minimal4.
Preparing to unpack .../libtcmalloc-minimal4_2.5-2.2ubuntu3_amd64.deb ...
Unpacking libtcmalloc-minimal4 (2.5-2.2ubuntu3) ...
Selecting previously unselected package libgoogle-perftools4.
Preparing to unpack .../libgoogle-perftools4_2.5-2.2ubuntu3_amd64.deb ...
Unpacking libgoogle-perftools4 (2.5-2.2ubuntu3) ...
Selecting previously unselected package mongodb-clients.
Preparing to unpack .../mongodb-clients_1%3a3.6.3-0ubuntu1.1_amd64.deb ...
Unpacking mongodb-clients (1:3.6.3-0ubuntu1.1) ...
Setting up libtcmalloc-minimal4 (2.5-2.2ubuntu3) ...
Setting up libgoogle-perftools4 (2.5-2.2ubuntu3) ...
Processing triggers for libc-bin (2.27-3ubuntu1) ...
Processing triggers for man-db (2.8.3-2ubuntu0.1) ...
Setting up libboost-program-options1.65.1:amd64 (1.65.1+dfsg-0ubuntu5) ...
Setting up mongodb-clients (1:3.6.3-0ubuntu1.1) ...
Processing triggers for libc-bin (2.27-3ubuntu1) ...
aiktc@aiktc24:~$ clear


aiktc@aiktc24:~$ mongo
MongoDB shell version v3.6.3
connecting to: mongodb://127.0.0.1:27017
MongoDB server version: 4.0.10
WARNING: shell and server versions do not match
Welcome to the MongoDB shell.
For interactive help, type "help".
For more comprehensive documentation, see
	http://docs.mongodb.org/
Questions? Try the support group
	http://groups.google.com/group/mongodb-user
Server has startup warnings: 
2019-07-17T10:49:30.168+0530 I STORAGE  [initandlisten] 
2019-07-17T10:49:30.168+0530 I STORAGE  [initandlisten] ** WARNING: Using the XFS filesystem is strongly recommended with the WiredTiger storage engine
2019-07-17T10:49:30.168+0530 I STORAGE  [initandlisten] **          See http://dochub.mongodb.org/core/prodnotes-filesystem
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] 
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] ** WARNING: Access control is not enabled for the database.
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] **          Read and write access to data and configuration is unrestricted.
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] 
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] ** WARNING: This server is bound to localhost.
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] **          Remote systems will be unable to connect to this server. 
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] **          Start the server with --bind_ip <address> to specify which IP 
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] **          addresses it should serve responses from, or with --bind_ip_all to
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] **          bind to all interfaces. If this behavior is desired, start the
2019-07-17T10:49:31.234+0530 I CONTROL  [initandlisten] **          server with --bind_ip 127.0.0.1 to disable this warning.
2019-07-17T10:49:31.235+0530 I CONTROL  [initandlisten] 


> use Student

switched to db Student
> db.Student.insert(
... { "StudentID" : "39"},
... { "StudentName" : "Rizzu" },
... );

> db.Student.insert( { "StudentID" : "39"}, { "StudentName" : "Rizzu" } );
WriteResult({ "nInserted" : 1 })

> var Student = [
...               {
...                  "StudentID" : "23",
...                  "StudentName" : "Atay"
...               },
...               { 
...                  "StudentID" : "45",
...                  "StudentName" : "Hussain"
...               },
...            ];
> db.Student.insert(Student)
BulkWriteResult({
	"writeErrors" : [ ],
	"writeConcernErrors" : [ ],
	"nInserted" : 2,
	"nUpserted" : 0,
	"nMatched" : 0,
	"nModified" : 0,
	"nRemoved" : 0,
	"upserted" : [ ]
})


> db.Student.find().forEach(printjson)
{ "_id" : ObjectId("5d2eb264c10fb2612134f82d"), "StudentID" : "39" }
{
	"_id" : ObjectId("5d2eb3ecc10fb2612134f82e"),
	"StudentID" : "23",
	"StudentName" : "Atay"
}
{
	"_id" : ObjectId("5d2eb3ecc10fb2612134f82f"),
	"StudentID" : "45",
	"StudentName" : "Hussain"
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f830"),
	"StudentID" : "23",
	"StudentName" : "Atay"
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f831"),
	"StudentID" : "45",
	"StudentName" : "Hussain"
}

> db.Student.deleteOne({"StudentID" : "45"});
{ "acknowledged" : true, "deletedCount" : 1 }
> db.Student.find().forEach(printjson)
{ "_id" : ObjectId("5d2eb264c10fb2612134f82d"), "StudentID" : "39" }
{
	"_id" : ObjectId("5d2eb3ecc10fb2612134f82e"),
	"StudentID" : "23",
	"StudentName" : "Atay"
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f830"),
	"StudentID" : "23",
	"StudentName" : "Atay"
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f831"),
	"StudentID" : "45",
	"StudentName" : "Hussain"
}
> db.Student.deleteMany({"StudentID" : "45"});
{ "acknowledged" : true, "deletedCount" : 1 }
> db.Student.find().forEach(printjson)
{ "_id" : ObjectId("5d2eb264c10fb2612134f82d"), "StudentID" : "39" }
{
	"_id" : ObjectId("5d2eb3ecc10fb2612134f82e"),
	"StudentID" : "23",
	"StudentName" : "Atay"
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f830"),
	"StudentID" : "23",
	"StudentName" : "Atay"
}
> db.Student.updateMany({ "StudentID" : "23"},
... {  $set : { "StudentName" : "HUSSAIN" },
...    $currentDate : { lastModified : true }
... })
{ "acknowledged" : true, "matchedCount" : 2, "modifiedCount" : 2 }
> db.Student.find().forEach(printjson)
{ "_id" : ObjectId("5d2eb264c10fb2612134f82d"), "StudentID" : "39" }
{
	"_id" : ObjectId("5d2eb3ecc10fb2612134f82e"),
	"StudentID" : "23",
	"StudentName" : "HUSSAIN",
	"lastModified" : ISODate("2019-07-17T06:06:58.604Z")
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f830"),
	"StudentID" : "23",
	"StudentName" : "HUSSAIN",
	"lastModified" : ISODate("2019-07-17T06:06:58.604Z")
}
> db.Student.updateOne({ "StudentID" : "23"}, {  $set : { "StudentName" : "HUSSAIN" },    $currentDate : { lastModified : true } })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.Student.find().forEach(printjson)
{ "_id" : ObjectId("5d2eb264c10fb2612134f82d"), "StudentID" : "39" }
{
	"_id" : ObjectId("5d2eb3ecc10fb2612134f82e"),
	"StudentID" : "23",
	"StudentName" : "HUSSAIN",
	"lastModified" : ISODate("2019-07-17T06:13:13.484Z")
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f830"),
	"StudentID" : "23",
	"StudentName" : "HUSSAIN",
	"lastModified" : ISODate("2019-07-17T06:06:58.604Z")
}
> db.Student.updateOne({ "StudentID" : "23"}, {  $set : { "StudentName" : "Rizzu" },    $currentDate : { lastModified : true } })
{ "acknowledged" : true, "matchedCount" : 1, "modifiedCount" : 1 }
> db.Student.find().forEach(printjson)
{ "_id" : ObjectId("5d2eb264c10fb2612134f82d"), "StudentID" : "39" }
{
	"_id" : ObjectId("5d2eb3ecc10fb2612134f82e"),
	"StudentID" : "23",
	"StudentName" : "Rizzu",
	"lastModified" : ISODate("2019-07-17T06:13:22.684Z")
}
{
	"_id" : ObjectId("5d2eb3f0c10fb2612134f830"),
	"StudentID" : "23",
	"StudentName" : "HUSSAIN",
	"lastModified" : ISODate("2019-07-17T06:06:58.604Z")
}

